#!/bin/sh

usage()
{
	printf "%s\n%s\n" "Usage: ${0} FILE [DIR]" "See ${0} --help"
	exit
}

help()
{
	cat << _EOF
Usage: ${0} FILE [DIR]
FILE:
	Border of her Heart (BOHH) archive
DIR:
	Optional directory to extract to
_EOF
	exit
}

[ -z "${1}" ] && usage
[ "${1}" = "--help" ] && help

[ ! -f "${1}" ] &&
	{
		printf "%s\n" "${1} is not a file"
		usage
	}

[ "$(od -N 8 -t u8 "${1}" | head -n 1 | sed 's/.*\ //')" != "4294967301" ] &&
	{
	printf "%s\n" "${1} is not a valid BOHH pak file"
	usage
	}
 
if [ "${2}" ]
then
	mkdir -p ./"${2}"
else
	mkdir ./"${1%%.*}"
fi
 
record_count=$(od -N 2 -j 8 -t u2 "${1}" | head -n 1 | sed 's/^.*\ //')

if
	for record_index in $(seq "${record_count}")
	do
		value=$(( 12 + (record_index - 1) * 6 ))
		# still trying to reverse engineer index table for proper file names
		file_name=$(od -N 2 -j "${value}" -t x2 "${1}" | head -n 1 | sed 's/^.*\ //')
		file1_offset=$(od -N 4 -j "$(( value + 2 ))" -t u4 "${1}" | head -n 1 | sed 's/^.*\ //')
		file2_offset=$(od -N 4 -j "$(( value + 8 ))" -t u4 "${1}" | head -n 1 | sed 's/^.*\ //')
		file_size=$(( file2_offset - file1_offset ))
		dd if="${1}" bs=1 count="${file_size}" skip="${file1_offset}" of="${2:-${1%%.*}}"/"${file_name}" 2> /dev/null
		echo "\033[1m${record_index}\033[0m of \033[1m${record_count}\033[0m extracted"
		tput cuu1
	done
then
    printf "\n%s\n" "Successfully extracted ${1}"
else
	printf "\n%s\n" "Failed to extract ${1}"
	exit
fi

#!/bin/sh

# neko sources files depending on arguments
# shellcheck source=/dev/null
# some variables are sourced from the specified template
# shellcheck disable=SC2154

# .gitignore file doesn't push master directory
[ ! -d master ] && mkdir -p master

# Check for permissions
user_id=$(id | cut -d' ' -f1 | sed 's/uid=//;s/(.*//')
[ "${user_id}" = 0 ] && perms="root" || perms="anon"

neko_msg()
{
	case "${1}" in
		"normal") echo "\033[1m=> \033[36mneko:\033[0m ${2}" ;;
		"success") echo "\033[1m=> \033[32mneko:\033[0m ${2}" ;;
		"warning") echo "\033[1m=> \033[33mneko:\033[0m ${2}" ;;
		"error") echo "\033[1m=> \033[31mneko:\033[0m ${2}" ;;
	esac
}

neko_prepare()
{
	[ ! -f srcpkgs/"${1}"/template ] && neko_msg error "No template found for ${1}" && exit
	neko_msg normal "Preparing environment..."
	. srcpkgs/"${1}"/template
	patches_dir=srcpkgs/"${1}"/patches
	if [ "${distfiles}" ]
	then
		wrksrc="${pkgname}-${version}"
	elif [ "${giturl}" ]
	then
		wrksrc="${pkgname}"
	fi
	# Allow override of wrksrc
	. srcpkgs/"${1}"/template
	[ -d master/"${wrksrc}" ] && rm -rf master/"${wrksrc}"
	cd master || exit
}

neko_fetch()
{
	neko_msg normal "Downloading source for ${1}..."
	if [ "${distfiles}" ]
	then
		if
			wget "${distfiles}"
		then
			neko_msg success "Successfully fetched distfiles for ${1}"
		else
			neko_msg error "Failed to fetch distfiles for ${1}"
		fi
	elif [ "${giturl}" ]
	then
		if
			git clone "${giturl}"
		then
			neko_msg success "Successfully cloned git repo for ${1}"
		else
			neko_msg error "Failed to clone git repo for ${1}"
		fi
	else
		neko_msg error "No distfiles or giturl specified"
	fi
}

neko_extract()
{
	neko_msg normal "Extracting distfiles for ${1}..."
	[ "${distfiles}" ] && tar zxvf "${archive}"
	cd "${wrksrc}" || exit
}

neko_patch()
{
	if [ -d ../../"${patches_dir}" ]
	then
		neko_msg normal "Applying patches for ${1}..."
		if
			for patch in ../../"${patches_dir}"/*.patch
			do
				neko_msg normal "Applying patch ${patch##*/}..."
				patch -Np1 < "${patch}"
			done
		then
			neko_msg success "Successfully applied patches to ${1}"
		else
			neko_msg error "Failed to apply one or more patches to ${1}"
		fi
	fi
}

neko_build()
{
	neko_msg normal "Building ${1}..."
	case "${build_style}" in
		"makefile")
			if
				make
			then
				neko_msg success "Successfully built ${1}"
			else
				neko_msg error "Failed to build ${1}"
			fi
			;;
		"configure")
			if
				./configure
				make
			then
				neko_msg success "Successfully built ${1}"
			else
				neko_msg error "Failed to build ${1}"
			fi
			;;
		"meson")
			if
				meson build
				ninja -C build
			then
				neko_msg success "Successfully built ${1}"
			else
				neko_msg error "Failed to build ${1}"
			fi
	esac
}

neko_install()
{
	neko_msg normal "Installing ${1}..."
	case "${build_style}" in
		"makefile")
			if
				make install
			then
				neko_msg success "Successfully installed ${1}"
			else
				neko_msg error "Failed to install ${1}"
			fi
			;;
		"configure")
			if
				make install
			then
				neko_msg success "Successfully installed ${1}"
			else
				neko_msg error "Failed to install ${1}"
			fi
			;;
		"meson")
			if
				ninja -C build install
			then
				neko_msg success "Successfully installed ${1}"
			else
				neko_msg error "Failed to install ${1}"
			fi
			;;
	esac
}

case "${1}" in
	"pkg")
		for step in prepare fetch extract patch build
		do
			neko_"${step}" "${2}"
		done
		;;
	"clean")
		neko_msg normal "Cleaning source directory..."
		if
			rm -rf master/*
		then
			neko_msg success "Successfully cleaned master directory"
		else
			neko_msg error "Failed to clean master directory"
		fi
		;;
	"em" | "emerge")
		[ "${perms}" = "anon" ] && neko_msg error "You must have root permissions to run this command" && exit
		for step in prepare fetch extract patch build install
		do
			neko-"${step}" "${2}"
		done
		;;
	*)
		neko_msg error "Unknown option ${1}"
esac

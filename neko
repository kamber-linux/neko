#!/bin/sh

# neko sources files depending on arguments
# shellcheck source=/dev/null
# some variables are sourced from the specified template
# shellcheck disable=SC2154

# Must match with makefile for root stuff
root_base_dir="${DESTDIR}"/usr/local/share/neko
root_pkgs_dir="${root_base_dir}"/srcpkgs
root_master_dir="${root_base_dir}"/master
root_licenses_dir="${root_base_dir}"/licenses

base_dir="${XDG_DATA_HOME:-$HOME/.local/share}"/neko
pkgs_dir="${base_dir}"/srcpkgs
master_dir="${base_dir}"/master
licenses_dir="${base_dir}"/licenses

[ "$(id -u)" = "0" ] && perms="root" || perms="anon"

neko_msg()
{
	case "${1}" in
		"normal") echo "\033[1m=> \033[36mneko:\033[0m ${2}" ;;
		"success") echo "\033[1m=> \033[32mneko:\033[0m ${2}" ;;
		"warning") echo "\033[1m=> \033[33mneko:\033[0m ${2}" ;;
		"error") echo "\033[1m=> \033[31mneko:\033[0m ${2}" ;;
	esac
}

neko_pkg()
{
	case "${1}" in
		"install")
			case "${2}" in
				"bin")
					mkdir -p "${DESTDIR}"/usr/local/bin
					cp -r "${3}" "${DESTDIR}"/usr/local/bin
					chmod 755 "${DESTDIR}"/usr/local/bin/"${3}"
					;;
				"man")
					mkdir -p "${DESTDIR}"/usr/local/share/man/man"${4:-1}"
					cp -r "${3}" "${DESTDIR}"/usr/local/share/man/man"${4:-1}"
					chmod 644 "${DESTDIR}"/usr/local/share/man/man"${4:-1}"/"${3}"
					;;
				"lib")
					mkdir -p "${DESTDIR}"/usr/local/lib
					cp -r "${3}" "${DESTDIR}"/usr/local/lib
					chmod 644 "${DESTDIR}"/usr/local/lib/"${3}"
					;;
				"inc")
					mkdir -p "${DESTDIR}"/usr/local/include
					cp -r "${3}" "${DESTDIR}"/usr/local/include
					chmod 644 "${DESTDIR}"/usr/local/include/"${2}"
					;;
				"conf")
					mkdir -p "${DESTDIR}"/etc"${4}"
					cp -r "${3}" "${DESTDIR}"/etc"${4}"
					chmod 644 "${DESTDIR}"/etc"${4}"/"${3}"
					;;
				"file")
					mkdir -p "${DESTDIR}"/usr/local"${5}"
					cp -r "${4}" "${DESTDIR}"/usr/local"${5}"
					chmod "${3}" "${DESTDIR}"/usr/local"${5}"/"${4}"
					;;
			esac
			;;
		"uninstall")
			case "${2}" in
				"bin") rm -rf "${DESTDIR:?}"/usr/local/bin/"${3}" ;;
				"man") rm -rf "${DESTDIR:?}"/usr/local/share/man/man"${4:-1}"/"${3}" ;;
				"lib") rm -rf "${DESTDIR:?}"/usr/local/lib/"${3}" ;;
				"inc") rm -rf "${DESTDIR:?}"/usr/local/include/"${3}" ;;
				"conf") rm -rf "${DESTDIR:?}"/etc/"${3}" ;;
				"file") rm -rf "${DESTDIR:?}"/usr/local"${3}" ;;
			esac
			;;
	esac
}

neko_init()
{
	for dir in "${base_dir}" "${pkgs_dir}" "${master_dir}" "${licenses_dir}"
	do
		[ ! -d "${dir}" ] && neko_msg normal "Making dir ${dir}..." && if
		mkdir -p "${dir}"
	then
		neko_msg success "Successfully made dir ${dir}"
	else
		neko_msg error "Failed to make dir ${dir}" && exit
		fi
	done
	neko_msg normal "Copying base srcpkgs to ${base_dir}..."
	if
		cp -r srcpkgs "${base_dir}"
	then
		neko_msg success "Successfully copied base srcpkgs to ${base_dir}"
	else
		neko_msg error "Failed to copy base srcpkgs to ${base_dir}" && exit
	fi
	neko_msg normal "Copying licenses to ${base_dir}..."
	if
		cp -r licenses "${base_dir}"
	then
		neko_msg success "Successfully copied licenses to ${base_dir}"
	else
		neko_msg error "Failed to copy licenses to ${base_dir}..." && exit
	fi
}

neko_zap()
{
	neko_msg normal "Zapping neko directory ${base_dir}..."
	if
		rm -rf "${base_dir:?}"/*
	then
		neko_msg success "Successfully zapped neko directory"
	else
		neko_msg error "Failed to zap neko directory" && exit
	fi

}

neko_prepare()
{
	[ ! -d "${pkgs_dir}" ] && neko_msg error "No base srcpkgs found in ${base_dir}" && neko_msg normal "Run neko init" && exit
	[ ! -d "${master_dir}" ] && neko_msg error "No master dir found in ${base_dir}" && neko_msg normal "Run neko init" && exit
	[ ! -f "${pkgs_dir}"/"${1}"/template ] && neko_msg error "No template found for ${1}" && exit
	. "${pkgs_dir}"/"${1}"/template
	[ "${build_style}" != "meta" ] && neko_msg normal "Preparing environment..."
	# Check for dependencies
	if [ "${deps}" ]
	then
		for pkg_dep in ${deps}
		do
			# neko_msg normal "${pkg_dep}"
			./neko pkg "${pkg_dep}"
		done
	fi
	patches_dir="${pkgs_dir}"/"${1}"/patches
	files_dir="${pkgs_dir}"/"${1}"/files
	if [ "${distfiles}" ]
	then
		wrksrc="${pkgname}"-"${version}"
	elif [ "${giturl}" ]
	then
		wrksrc="$(echo "${pkgname}" | sed 's/-git//')"
	fi
	archive="${distfiles##*/}"
	# Allow override of wrksrc and archive
	. "${pkgs_dir}"/"${1}"/template
	# Remove duplicate git repo
	[ -d "${master_dir}"/"${wrksrc}" ] && [ "${build_style}" != "meta" ] && rm -rf "${master_dir:?}"/"${wrksrc:?}"
	cd "${master_dir}" || exit
}

neko_fetch()
{
	[ "${build_style}" = "meta" ] && return
	neko_msg normal "Downloading source for ${1}..."
	if [ "${distfiles}" ]
	then
		if
			wget "${distfiles}"
		then
			neko_msg success "Successfully fetched distfiles for ${1}"
		else
			neko_msg error "Failed to fetch distfiles for ${1}" && exit
		fi
	elif [ "${giturl}" ]
	then
		if
			git clone "${giturl}"
		then
			neko_msg success "Successfully cloned git repo for ${1}"
		else
			neko_msg error "Failed to clone git repo for ${1}" && exit
		fi
	else
		[ "${build_style}" != "meta" ] && neko_msg error "No distfiles or giturl specified"
	fi
}

neko_extract()
{
	[ "${build_style}" = "meta" ] && return
	neko_msg normal "Extracting distfiles for ${1}..."
	[ "${distfiles}" ] && case "${archive##*.}" in
	"gz" | "tgz")
		tar -zxvf "${archive}"
		;;
	"bz2" | "xz")
		tar -xvf "${archive}"
		;; 
esac
	cd "${wrksrc}" || exit
}

neko_patch()
{
	if [ -d "${patches_dir}" ]
	then
		neko_msg normal "Applying patches for ${1}..."
		for patch in "${patches_dir}"/*.patch
		do
			neko_msg normal "Applying patch ${patch##*/}..."
			if
				patch -Np1 < "${patch}"
			then
				neko_msg normal "Successfully applied patch ${patch##*/}"
			else
				neko_msg error "Failed to apply patch ${patch##*/}" && exit
			fi
		done
	fi
}

neko_build()
{
	# Try and use TCC by default
	if [ "${TCC}" = "false" ]
	then
		export CC=cc
	else
		export CC=tcc
	fi
	[ "${build_style}" != "meta" ] && neko_msg normal "Building ${1}..."
	case "${build_style}" in
		"meta")
			:
			;;
		"makefile")
			if [ "${make_args}" ]
			then
				bmake "${make_args}"
			else
				bmake
			fi
			;;
		"gnu-makefile")
			if [ "${make_args}" ]
			then
				make "${make_args}"
			else
				make
			fi
			;;
		"configure")
			if [ "${configure_args}" ]
			then
				./configure "${configure_args}"
			else
				./configure
			fi
			if [ "${make_args}" ]
			then
				bmake "${make_args}"
			else
				bmake
			fi
			;;
		"gnu-configure")
			if [ "${configure_args}" ]
			then
				./configure "${configure_args}"
			else
				./configure
			fi
			if [ "${make_args}" ]
			then
				make "${make_args}"
			else
				make
			fi
			;;
		"meson")
			export CC=cc # meson can't build with tcc compiler
			meson build
			ninja -C build
			;;
	esac
}

neko_install()
{
	neko_msg normal "Installing ${1}..."
	case "${build_style}" in
		"makefile")
			make install
			;;
		"configure")
			make install
			;;
		"meson")
			ninja -C build install
			;;
	esac
}

neko_license()
{
	for pkg_license in ${license}
	do
		case "${pkg_license}" in
			"MIT" | "BSD-3-Clause" | "custom")
				mkdir -p "${DESTIR}"/usr/local/share/licenses/"${pkgname}"
				cp -r "${license_file}" "${DESTDIR}"/usr/local/share/licenses/"${pkgname}"
				chmod 644 "${DESTDIR}"/usr/local/share/licenses/"${license_file}"
				;;
			"GPL-3.0-only" | "GPL-3.0-or-later")
				mkdir -p "${DESTDIR}"/usr/local/share/licenses
				cp -r "${licenses_dir}"/GPL-3 "${DESTDIR}"/usr/local/share/licenses
				chmod 644 "${DESTDIR}"/usr/local/share/licenses/GPL-3
				;;
			*)
				:
				;;
		esac
	done
}


neko_uninstall()
{
	case "${build_style}" in
		"makefile")
			make uninstall
			;;
	esac
}

case "${1}" in
	"init")
		neko_init
		;;
	"zap")
		neko_zap
		;;
	"pkg")
		for step in prepare fetch extract patch
		do
			neko_"${step}" "${2}"
		done
		if
			neko_build "${2}"
		then
			neko_msg success "Successfully built ${2}"
		else
			neko_msg error "Failed to build ${2}" && exit
		fi
		;;
	"clean")
		neko_msg normal "Cleaning source directory..."
		if
			rm -rf "${master_dir:?}"/*
		then
			neko_msg success "Successfully cleaned master directory"
		else
			neko_msg error "Failed to clean master directory" && exit
		fi
		;;
	"em" | "emerge")
		[ "${perms}" = "anon" ] && neko_msg error "You must have root permissions to run this command" && exit
		./neko pkg "${2}"
		if
			neko_install "${2}"
			neko_license
		then
			neko_msg success "Successfully installed ${2}"
		else
			neko_msg error "Failed to install ${2}" && exit
		fi
		;;
	"uninstall")
		for step in prepare fetch check extract patch
		do
			neko_"${step}" "${2}"
		done
		if
			neko_uninstall "${2}"
		then
			neko_msg success "Successfully uninstalled ${2}"
		else
			neko_msg error "Failed to uninstall ${2}" && exit
		fi
		;;
	"new")
		[ -d "${pkgs_dir}"/"${2}" ] && neko_msg error "There's already a template for ${2}" && exit
		neko_msg normal "Making a base template for ${2}..."
		if
			mkdir -p "${pkgs_dir}"/"${2}"
			{
			echo "pkgname=\"${2}\""
			echo "version=\"1.0\""
			echo "distfiles=\"url.to/source-\${version}.tar.gz\""
			echo "build_style=\"makefile\""
			echo "license=\"GPL-3.0-or-later\""
			} >> "${pkgs_dir}"/"${2}"/template
		then
			neko_msg success "Made a template for ${2} in ${pkgs_dir}/${2}"
		else
			neko_msg error "Failed to make a template for ${2}"
		fi
		;;
	*)
		neko_msg error "Unknown option ${1}"
esac

#!/bin/sh

# neko sources files depending on arguments
# shellcheck source=/dev/null
# some variables are sourced from the specified template
# shellcheck disable=SC2154
# Unused variables left for readability
# shellcheck disable=SC2034

root_base_dir="${DESTDIR}"/usr/local/share/neko
root_pkgs_dir="${root_base_dir}"/srcpkgs
root_src_dir="${root_base_dir}"/src
root_master_dir="${root_master_dir}"/master
root_license_dir="${root_base_dir}"/licenses
root_db_dir="${root_base_dir}"/db

base_dir="${XDG_DATA_HOME:-$HOME/.local/share}"/neko
pkgs_dir="${base_dir}"/srcpkgs
src_dir="${base_dir}"/src
master_dir="${base_dir}"/master
licenses_dir="${base_dir}"/licenses
db_dir="${base_dir}"/db

trap interrupt 2

neko_msg()
{
	case "${1}" in
		"normal") printf "%s\n" "[1m=> [36mneko:[0m ${2}" ;;
		"success") printf "%s\n" "[1m=> [32mneko:[0m ${2}" ;;
		"warning") printf "%s\n" "[1m=> [33mneko:[0m ${2}" ;;
		"error") printf "%s\n" "[1m=> [31mneko:[0m ${2}" ;;
	esac
}

usage()
{
	case "${1}" in
		"neko")
			cat << _EOF
[1musage[0m
${0} command [target]

See ${0} --help
_EOF
			;;
		"pkg")
			cat << _EOF
[1musage[0m
${0} pkg <target>

See ${0} pkg --help
_EOF
			;;
		"emerge")
			cat << _EOF
[1musage[0m
${0} em <target>
OR
${0} em <target>

See ${0} em --help
OR
See ${0} emerge --help
_EOF
			;;
		"uninstall")
			cat << _EOF
[1musage[0m
${0} uninstall <target>

See ${0} uninstall --help
_EOF
			;;
		"find")
			cat << _EOF
[1musage[0m
${0} find <target>

See ${0} find --help
_EOF
			;;
	esac
exit
}

help()
{
	case "${1}" in
		"neko")
			cat << _EOF
[1musage[0m
${0} command [target]

[1mcommand[0m:
init
	Initializes the environment for use with the templates - must be run before
	packaging from templates.
pkg <target>
	Checks to see if the <target> can be properly packaged from the template.
em | emerge <target>
	Emerges the <target>. Will build and install it to the system.
uninstall <target>
	Will uninstall <target> from the system.
find <target>
	Will search for the <target>
clean
	Cleans up the master directory.
zap
	Will remove everything from the neko directory - you must run neko init
	after doing so.
help [command]
	Displays this message, or help [command] to get help on [command]

[1mstatus[0m:
Neko will have different colors depending on the status:
$(neko_msg normal "This is a normal message.")
$(neko_msg success "This is a successful message.")
$(neko_msg warning "This is a warning message.")
$(neko_msg error "This is an error message.")
_EOF
			;;
		"init")
			cat << _EOF
[1musage[0m
${0} init

init
	Copies the srcpkgs directory, licenses directory, and makes the src and master
	directory in \${XDG_DATA_HOME:-\$HOME/.local/share}/neko. Run this once to
	initialize the process of packaging software. To make changes for your local
	system, change the templates in the created directory. To make changes for a
	pull request / upstream change, change the files in the neko git repo.
_EOF
			;;
		"pkg")
			cat << _EOF
[1musage[0m
${0} pkg <target>

pkg
	Will download, build, and install <target> from srcpkgs to an empty DESTDIR
	based off of the package's template. This step is invoked before the emerge
	step as it also sets up the INSTALL log which contains information on what was
	installed to the empty DESTDIR. ${0} pkg will first do this to the templates
	"deps" if it has any.

	Multiple arguments can be given to ${0} pkg and they will execute in the order
	that ${0} pkg is given. It is recommended to only pass one argument for the
	time being as multiple arguments currently is bugged.
_EOF
			;;
		"emerge")
			cat << _EOF
[1museage[0m
${0} em <target>
OR
${0} emerge <target>

em | emerge
	Will first run ${0} pkg <target>. This builds and installs to empty DESTDIR to
	make an INSTALL log (see ${0} help pkg for more details). It will run
	${0} pkg <target> for all of the "deps" if there are any. It then exports
	PREFIX to "/" and copies the files from the INSTALL log from the pkg step. It
	will do this for everything in "deps" if there are any.

	Multiple arguments can be given to ${0} em and they will execute in the order
	that ${0} em is given. It is recommended to only pass one argument for the
	time being as multiple arguments currently is bugged.
_EOF
			;;
		"uninstall")
			cat << _EOF
[1musage[0m
${0} uninstall <target>

uninstall
	Will remove files from PREFIX (/) based off of the INSTALL log made from the
	pkg step.
_EOF
			;;
		"find")
			cat << _EOF
[1musage[0m
${0} find <target>

find
	Will search in pkgs_dir (made after running ${0} init) for <target> and
	display the package name, version, revision, and the short decription of
	<target>.

	Multiple arguments can be given to ${0} find
_EOF
			;;
		"new")
			cat << _EOF
[1musage[0m
${0} new <target>
_EOF
			;;
		"clean")
			cat << _EOF
[1musage[0m
${0} clean

clean
	Will remove files from the empty DESTDIR (the master directory) and files from
	the source directory (src, where the source code gets downloaded).
_EOF
			;;
		"zap")
			cat << _EOF
[1musage[0m
${0} zap

zap
	Like ${0} clean, but stronger. Will remove EVERYTHING from the neko directory
	in \${XDG_DATA_HOME:-\$HOME}/.local/share/neko. You will need to run ${0} init
	again if you want to package something locally.
_EOF
			;;
		"help")
			cat << _EOF
[1musage[0m
${0} help [command]

help
	Displays help for [command]. If no argument is given, it is equivalent to
	${0} help neko.
_EOF
			;;
	esac
exit
}

interrupt()
{
	# to start on a new line
	echo ""
	neko_msg error "Command interrupted"
	exit 2
}

# pkg_install are only used in templates
pkg_install()
{
	case "${1}" in
		"bin")
			echo "Installing $(basename "${2}")..."
			if
				mkdir -p "${DESTDIR}${PREFIX}"/bin
				cp -R "${2}" "${DESTDIR}${PREFIX}"/bin
				chmod 755 "${DESTDIR}${PREFIX}/bin/$(basename "${2}")"
			then
				echo "Successfully installed ${2}"
			else
				echo "Failed to install ${2}"
			fi
			;;
		"man")
			echo "Installing $(basename "${2}")..."
			if
				mkdir -p "${DESTDIR}${PREFIX}/share/man/man${3:-1}"
				cp -R "${2}" "${DESTDIR}${PREFIX}/share/man/man${3:-1}"
				chmod 644 "${DESTDIR}${PREFIX}/share/man/man${3:-1}/$(basename "${2}")"
			then
				echo "Successfully installed ${2}"
			else
				echo "Failed to install ${2}"
			fi
			;;
		"lib")
			[ "${2}" = "pkgconfig" ] &&
				{
					find . -name "*.pc" |
						while read -r line
						do
							printf "%s\n" "Installing $(basename "${line}")..."
							if
								mkdir -p "${DESTDIR}${PREFIX}"/lib/pkgconfig
								cp -R "${line}" "${DESTDIR}${PREFIX}/lib/pkgconfig/$(basename "${line}")"
								chmod 755 "${DESTDIR}${PREFIX}/lib/pkgconfig/$(basename "${line}")"
							then
								printf "%s\n" "Successfully installed ${line}"
							else
								printf "%s\n" "Failed to install ${line}"
							fi
						done
						return
				}
			find . -name "${2}" |
				while read -r line
				do
					printf "%s\n" "Installing $(basename "${line}")..."
					if
						mkdir -p "${DESTDIR}${PREFIX}"/lib
						cp -R "${line}" "${DESTDIR}${PREFIX}"/lib
						chmod 755 "${DESTDIR}${PREFIX}/lib/$(basename "${line}")"
					then
						printf "%s\n" "Successfully installed ${line}"
					else
						printf "%s\n" "Failed to install ${line}"
					fi
				done
			;;
		"inc")
			printf "%s\n" "Installing $(basename "${2}")..."
			if
				mkdir -p "${DESTDIR}${PREFIX}"/include
				cp -R "${2}" "${DESTDIR}${PREFIX}"/include
				# FIXME
				# If it runs on a folder, chaos happens with permissions
				# Fix will probably involve the find command
				#chmod 644 "${DESTDIR}${PREFIX}"/include/"$(basename "${2}")"
			then
				printf "%s\n" "Successfully installed ${2}"
			else
				printf "%s\n" "Failed to install ${2}"
			fi
			;;
		"conf")
			echo "Installing $(basename "${2}")..."
			if
				mkdir -p "${DESTDIR}${PREFIX}/etc${3}"
				cp -R "${2}" "${DESTDIR}${PREFIX}/etc${3}"
				chmod 644 "${DESTDIR}${PREFIX}/etc${3}/$(basename "${2}")"
			then
				echo "Successfully installed ${2}"
			else
				echo "Failed to install ${2}"
			fi
			;;
		"file")
			pkg_install file README 644 /usr/share/doc
			echo "Installing $(basename "${2}")..."
			if
				mkdir -p "${DESTDIR}${PREFIX}${4}"
				cp -R "${2}" "${DESTDIR}${PREFIX}${4}"
				chmod "${3}" "${DESTDIR}${PREFIX}${4}/${2}"
			then
				echo "Successfully installed $(basename "${2}")"
			else
				echo "Failed to install $(basename "${2}")"
			fi
			;;
	esac
}

neko_init()
{
	for dir in "${base_dir}" "${pkgs_dir}" "${src_dir}" "${master_dir}"\
		"${licenses_dir}" "${db_dir}"
	do
		[ ! -d "${dir}" ] && neko_msg normal "Making dir ${dir}..." &&
			if
				mkdir -p "${dir}"
			then
				neko_msg success "Successfully made dir ${dir}"
			else
				neko_msg error "Failed to make dir ${dir}"
				exit
			fi
	done
	neko_msg normal "Copying base srcpkgs to ${base_dir}..."
	if
		cp -R srcpkgs "${base_dir}"
	then
		neko_msg success "Successfully copied base srcpkgs to ${base_dir}"
	else
		neko_msg error "Failed to copy base srcpkgs to ${base_dir}"
		exit
	fi
	neko_msg normal "Copying licenses to ${base_dir}..."
	if
		cp -R licenses "${base_dir}"
	then
		neko_msg success "Successfully copied licenses to ${base_dir}"
	else
		neko_msg error "Failed to copy licenses to ${base_dir}..."
		exit
	fi
}

neko_zap()
{
	neko_msg normal "Zapping neko directory ${base_dir}..."
	if
		rm -rf "${base_dir:?}"/*
	then
		neko_msg success "Successfully zapped neko directory"
	else
		neko_msg error "Failed to zap neko directory"
		exit
	fi

}

neko_prepare()
{
	[ ! -d "${pkgs_dir}" ] && [ ! -d "${root_pkgs_dir}" ] &&
		{
			neko_msg error "No base srcpkgs found in ${base_dir}"
			neko_msg normal "Run ${0} init"
			exit
		}
	[ ! -d "${master_dir}" ] && [ ! -d "${root_master_dir}" ] &&
		{
			neko_msg error "No master dir found in ${base_dir}"
			neko_msg normal "Run ${0} init"
			exit
		}
	[ ! -d "${src_dir}" ] && [ ! -d "${root_src_dir}" ] &&
		{
			neko_msg error "No master dir found in ${base_dir}"
			neko_msg normal "Run ${0} init"
			exit
		}
	[ ! -d "${licenses_dir}" ] && [ ! -d "${root_license_dir}" ] &&
		{
			neko_msg error "No master dir found in ${base_dir}"
			neko_msg normal "Run ${0} init"
			exit
		}
	[ ! -d "${db_dir}" ] && [ ! -d "${root_db_dir}" ] &&
		{
			neko_msg error "No databse dir found in ${base_dir}"
			neko_msg normal "Run ${0} init"
			exit
		}
	if [ -f "${pkgs_dir}"/"${1}"/template ]
	then
		template_file="${pkgs_dir}"/"${1}"/template
		patches_dir="${pkgs_dir}"/"${1}"/patches
		files_dir="${pkgs_dir}"/"${1}"/files
		source_dir="${src_dir}"
		database="${base_dir}"/db
	elif [ -f "${root_pkgs_dir}"/"${1}"/template ]
	then
		template_file="${root_pkgs_dir}"/"${1}"/template
		patches_dir="${root_pkgs_dir}"/"${1}"/patches
		files_dir="${root_pkgs_dir}"/"${1}"/files
		source_dir="${root_src_dir}"
		database="${root_base_dir}"/db
	else
		neko_msg error "No template found for ${1}"
		exit
	fi
	. "${template_file}"
	if [ "${distfiles}" ]
	then
		wrksrc="${pkgname}"-"${version}"
	elif [ "${giturl}" ]
	then
		wrksrc="$(echo "${pkgname}" | sed 's/-git//')"
	fi
	archive="${distfiles##*/}"
	# Allow override of wrksrc and archive from the template
	. "${template_file}"
}

neko_fetch()
{
	# Remove duplicate wrksrc
	{
		[ -n "${distfiles}" ] || [ -n "${giturl}" ]
	} && [ -d "${source_dir}"/"${wrksrc}" ] && [ "${build_style}" != "meta" ] &&
		rm -rf "${source_dir:?}"/"${wrksrc:?}"
	# Remove duplicate archive
	[ "${distfiles}" ] && [ -f "${source_dir}"/"${archive}" ] &&
		[ "${build_style}" != "meta" ] && rm -rf "${source_dir:?}"/"${archive:?}"
	cd "${source_dir}" || exit
	[ "${build_style}" = "meta" ] && return
	neko_msg normal "Downloading source for ${1}..."
	if [ "${distfiles}" ]
	then
		if
			wget "${distfiles}"
		then
			neko_msg success "Successfully fetched distfiles for ${1}"
		else
			neko_msg error "Failed to fetch distfiles for ${1}"
			exit
		fi
	elif [ "${giturl}" ]
	then
		if
			git clone "${giturl}"
		then
			neko_msg success "Successfully cloned git repo for ${1}"
		else
			neko_msg error "Failed to clone git repo for ${1}"
			exit
		fi
	else
		[ "${build_style}" != "meta" ] &&
			{
				neko_msg warning "No distfiles or giturl specified"
				return
			}
	fi
}

neko_extract()
{
	[ "${build_style}" = "meta" ] && return
	[ "${distfiles}" ] && neko_msg normal "Extracting distfiles for ${1}..."
	[ "${distfiles}" ] &&
		if
			case "${archive##*.}" in
				"gz" | "tgz")
					tar -zxvf "${archive}"
					;;
				"bz2" | "xz")
					tar -xvf "${archive}"
					;; 
			esac
		then
			neko_msg success "Successfully extracted distfiles for ${pkgname}"
		else
			neko_msg error "Failed to extract distfiles for ${pkgname}"
			exit
		fi
	if [ -n "${distfiles}" ] || [ -n "${giturl}" ]
	then
		cd "${wrksrc}" || exit
	fi
}

neko_patch()
{
	[ -d "${patches_dir}" ] &&
		{
			for patch in "${patches_dir}"/*.patch
			do
				[ ! -f "${patch}" ] &&
					{
						neko_msg warning "There is a patches directory but no patches"
						return
					}
			done
			neko_msg normal "Applying patches for ${1}..."
			for patch in "${patches_dir}"/*.patch
			do
				neko_msg normal "Applying patch ${patch##*/}..."
				if
					patch -Np1 < "${patch}"
				then
					neko_msg normal "Successfully applied patch ${patch##*/}"
				else
					neko_msg error "Failed to apply patch ${patch##*/}"
					exit
				fi
			done
		}
}

neko_build()
{
	case "${build_style}" in
		"meta")
			:
			;;
		"makefile")
			if [ "${make_build_args}" ]
			then
				bmake CC="${CC}" -I"${DESTDIR}${PREFIX}"/include LDFLAGS=-L"${DESTDIR}${PREFIX}"/lib "${make_build_args}"
			else
				bmake CC="${CC}" -I"${DESTDIR}${PREFIX}"/include LDFLAGS=-L"${DESTDIR}${PREFIX}"/lib
			fi
			;;
		"gnu-makefile")
			if [ "${make_build_args}" ]
			then
				make CC="${CC}" -I"${DESTDIR}${PREFIX}"/include LDFLAGS=-L"${DESTDIR}${PREFIX}"/lib "${make_build_args}"
			else
				make CC="${CC}" -I"${DESTDIR}${PREFIX}"/include LDFLAGS=-L"${DESTDIR}${PREFIX}"/lib
			fi
			;;
		"configure")
			if [ "${configure_args}" ]
			then
				./configure --prefix="${PREFIX}" "${configure_args}"
			else
				./configure --prefix="${PREFIX}"
			fi
			if [ "${make_build_args}" ]
			then
				bmake CC="${CC}" -I"${DESTDIR}${PREFIX}"/include LDFLAGS=-L"${DESTDIR}${PREFIX}"/lib "${make_build_args}"
			else
				bmake CC="${CC}" -I"${DESTDIR}${PREFIX}"/include LDFLAGS=-L"${DESTDIR}${PREFIX}"/lib
			fi
			;;
		"gnu-configure")
			if [ "${configure_args}" ]
			then
				./configure --prefix="${PREFIX}" "${configure_args}"
			else
				./configure --prefix="${PREFIX}"
			fi
			if [ "${make_build_args}" ]
			then
				make CC="${CC}" -I"${DESTDIR}${PREFIX}"/include LDFLAGS=-L"${DESTDIR}${PREFIX}"/lib "${make_build_args}"
			else
				make CC="${CC}" -I"${DESTDIR}${PREFIX}"/include LDFLAGS=-L"${DESTDIR}${PREFIX}"/lib
			fi
			;;
		"meson")
			export CC=gcc # meson can only build with gcc (eww)
			meson --prefix="${PREFIX}" build
			ninja -C build
			;;
		"haskell-cabal")
			:
			;;
	esac
}

neko_install()
{
	case "${build_style}" in
		"meta")
			:
			;;
		"makefile" | "configure")
			if [ "${make_install_args}" ]
			then
				bmake DESTDIR="${DESTDIR}" PREFIX="${PREFIX}" "${make_install_args}" install
			else
				bmake DESTDIR="${DESTDIR}" PREFIX="${PREFIX}" install
			fi
			;;
		"gnu-makefile" | "gnu-configure")
			if [ "${make_install_args}" ]
			then
				make DESTDIR="${DESTDIR}" PREFIX="${PREFIX}" "${make_install_args}" install
			else
				make DESTDIR="${DESTDIR}" PREFIX="${PREFIX}" install
			fi
			;;
		"meson")
			DESTDIR="${DESTDIR}" ninja -C build install
			;;
		"haskell-cabal")
			cabal update
			cabal install
			;;
	esac
}

neko_license_install()
{
	[ -z "${license}" ] &&
		{
			neko_msg warning "No license specified for ${pkgname}"
			return
		}
	for pkg_license in ${license}
	do
		neko_msg normal "Installing ${pkg_license} license for ${pkgname}..."
		if
			case "${pkg_license}" in
				"MIT" | "BSD-3-Clause" | "ISC" | "custom")
					mkdir -p "${DESTDIR}${PREFIX}/share/licenses/${pkgname}"
					for licenses in ${license_file}
					do
						cp -R "${licenses}" "${DESTDIR}${PREFIX}/share/licenses/${pkgname}"
						chmod 644 \
							"${DESTDIR}${PREFIX}/share/licenses/${pkgname}/$(basename "${licenses}")"
					done
					;;
				"Public-Domain")
					mkdir -p "${DESTDIR}${PREFIX}/share/licenses/${pkgname}"
					cp -R "${licenses_dir}"/Public-Domain "${DESTDIR}${PREFIX}"/share/licenses
					chmod 644 "${DESTDIR}${PREFIX}"/share/licenses/Public-Domain
					ln -sf "${DESTDIR}${PREFIX}"/share/licenses/Public-Domain \
						"${DESTDIR}${PREFIX}/share/licenses/${pkgname}/${pkg_license}"
					;;
				"Apache-2.0")
					mkdir -p "${DESTDIR}${PREFIX}/share/licenses/${pkgname}"
					cp -R "${licenses_dir}"/Apache-2 "${DESTDIR}${PREFIX}"/share/licenses
					chmod 644 "${DESTDIR}${PREFIX}"/share/licenses/Apache-2
					ln -sf "${DESTDIR}${PREFIX}"/share/licenses/Apache-2 \
						"${DESTDIR}${PREFIX}"/share/licenses/"${pkgname}"/"${pkg_license}"
					;;
				"GPL-1.0-only" | "GPL-1.0-or-later")
					mkdir -p "${DESTDIR}${PREFIX}/share/licenses/${pkgname}"
					cp -R "${licenses_dir}"/GPL-1 "${DESTDIR}${PREFIX}"/share/licenses
					chmod 644 "${DESTDIR}${PREFIX}"/share/licenses/GPL-1
					ln -sf "${DESTDIR}${PREFIX}"/share/licenses/GPL-2 \
						"${DESTDIR}${PREFIX}/share/licenses/${pkgname}/${pkg_license}"
					;;
				"GPL-2.0-only" | "GPL-2.0-or-later")
					mkdir -p "${DESTDIR}${PREFIX}/share/licenses/${pkgname}"
					cp -R "${licenses_dir}"/GPL-2 "${DESTDIR}${PREFIX}"/share/licenses
					chmod 644 "${DESTDIR}${PREFIX}"/share/licenses/GPL-2
					ln -sf "${DESTDIR}${PREFIX}"/share/licenses/GPL-2 \
						"${DESTDIR}${PREFIX}/share/licenses/${pkgname}/${pkg_license}"
					;;
				"GPL-3.0-only" | "GPL-3.0-or-later")
					mkdir -p "${DESTDIR}${PREFIX}/share/licenses/${pkgname}"
					cp -R "${licenses_dir}"/GPL-3 "${DESTDIR}${PREFIX}"/share/licenses
					chmod 644 "${DESTDIR}${PREFIX}"/share/licenses/GPL-3
					ln -sf "${DESTDIR}${PREFIX}"/share/licenses/GPL-3 \
						"${DESTDIR}${PREFIX}/share/licenses/${pkgname}/${pkg_license}"
					;;
				"AGPL-3.0-only" | "AGPL-3.0-or-later")
					mkdir -p "${DESTDIR}${PREFIX}/share/licenses/${pkgname}"
					cp -R "${licenses_dir}"/AGPL-3 "${DESTDIR}${PREFIX}"/share/licenses
					chmod 644 "${DESTDIR}${PREFIX}"/share/licenses/AGPL-3
					ln -sf "${DESTDIR}${PREFIX}"/share/licenses/AGPL-3 \
						"${DESTDIR}${PREFIX}/share/licenses/${pkgname}/${pkg_license}"
					;;
				"LGPL-2-only" | "LGPL-2-or-later")
					mkdir -p "${DESTDIR}${PREFIX}/share/licenses/${pkgname}"
					cp -R "${licenses_dir}"/LGPL-2 "${DESTDIR}${PREFIX}"/share/licenses
					chmod 644 "${DESTDIR}${PREFIX}"/share/licenses/LGPL-2
					ln -sf "${DESTDIR}${PREFIX}"/share/licenses/LGPL-2 \
						"${DESTDIR}${PREFIX}/share/licenses/${pkgname}/${pkg_license}"
					;;
				"LGPL-2.1-only" | "LGPL-2.1-or-later")
					mkdir -p "${DESTDIR}${PREFIX}/share/licenses/${pkgname}"
					cp -R "${licenses_dir}"/LGPL-2.1 "${DESTDIR}${PREFIX}"/share/licenses
					chmod 644 "${DESTDIR}${PREFIX}"/share/licenses/LGPL-2.1
					ln -sf "${DESTDIR}${PREFIX}"/share/licenses/LGPL-2.1 \
						"${DESTDIR}${PREFIX}/share/licenses/${pkgname}/${pkg_license}"
					;;
				"LGPL-3-only" | "LGPL-3-or-later")
					mkdir -p "${DESTDIR}${PREFIX}/share/licenses/${pkgname}"
					cp -R "${licenses_dir}"/LGPL-3 "${DESTDIR}${PREFIX}"/share/licenses
					chmod 644 "${DESTDIR}${PREFIX}"/share/licenses/LGPL-3
					ln -sf "${DESTDIR}${PREFIX}"/share/licenses/LGPL-3 \
						"${DESTDIR}${PREFIX}/share/licenses/${pkgname}/${pkg_license}"
					;;
				*)
					neko_msg error "${pkg_license} is not a valid license name"
					exit
					;;
			esac
		then
			neko_msg success "Successfully installed ${pkg_license} license for ${pkgname}"
			neko_msg normal "The ${pkg_license} license for ${pkgname} can be found in:
${DESTDIR}${PREFIX}/share/licenses/${pkgname}"
		else
			neko_msg error "Failed to install ${pkg_license} license for ${pkgname}"
			exit
		fi
	done
}

neko_uninstall()
{
	while read -r pkg_file
	do
		rm -rf "${DESTDIR:?}"/"${pkg_file}"
	done < "${database}"/"${pkgname}"/INSTALL
}

neko_license_uninstall()
{
	for pkg_license in ${license}
	do
		neko_msg normal "Uninstalling ${pkg_license} license for ${pkgname}..."
		if
			rm -rf "${DESTDIR:?}"/usr/local/share/licenses/"${pkgname}"
		then
			neko_msg success "Successfully removed ${pkg_license} license for ${pkgname}"
		else
			neko_msg error "Failed to remove ${pkg_license} license for ${pkgname}"
			exit
		fi
	done
}

[ -z "${1}" ] && usage neko

case "${1}" in
	"init")
		shift 1
		case "$@" in
			"--help" | "-h") help init ;;
		esac
		neko_init
		;;
	"pkg")
		shift 1
		case "$@" in
			"--help" | "-h") help pkg ;;
		esac
		[ -z "${1}" ] && usage pkg
		for arg
		do
			if
				neko_prepare "${arg}"
				if [ -n "$(command -v "$(echo "${arg}" | sed 's/\-/_/g')"_pkg)" ]
				then
					"$(echo "${arg}" | sed 's/\-/_/g')"_pkg
				fi
				[ "${build_style}" = "meta" ] || neko_msg normal "Preparing environment..."
				[ "${deps}" ] &&
					for pkg_dep in ${deps}
					do
						if [ -n "$(command -v neko)" ]
						then
							neko pkg "${pkg_dep}"
						else
							./neko pkg "${pkg_dep}"
						fi
					done
				export CC="${CC:-tcc}"
				export DESTDIR="${master_dir}"
				export PREFIX=/usr
				export PATH="$PATH:${DESTDIR}${PREFIX}/bin"
				for step in fetch extract patch
				do
					neko_"${step}" "${arg}"
				done
				[ "${build_style}" = "meta" ] || neko_msg normal "Building ${arg}..." &&
					if
						if [ -n "$(command -v do_build)" ]
						then
							do_build "${arg}"
							unset -f do_build
						else
							neko_build "${arg}"
						fi
					then
						neko_msg success "Successfully built ${arg}"
					else
						neko_msg error "Failed to build ${arg}"
						break
						exit
					fi
				neko_msg normal "Installing ${arg}..."
				if
					if [ -n "$(command -v do_install)" ]
					then
						do_install "${arg}"
						unset -f do_install
					else
						neko_install "${arg}"
					fi
					[ -n "$(command -v post_install)" ] &&
						{
							post_install
							unset -f post_install
						}
					neko_license_install
				then
					neko_msg success "Successfully installed ${arg}"
					neko_msg normal "Logging files into pkg database..."
					if
						mkdir -p "${database}"/"${pkgname}"-"${version}"_"${revision}"
						# FIXME
						# Need a way to specify only files from ${arg}
						# Removing after every pkg will remove dependencies...
						# Solution possibly involves using diff with previous INSTALL log
						find "${DESTDIR}" -type f | sed "s|${DESTDIR}||" |
							while read -r file
							do
								printf "%s %s\n" "${file}" "$(cksum "${DESTDIR}${file}" | cut -d' ' -f1)"
							done > "${database}"/"${pkgname}"-"${version}"_"${revision}"/INSTALL
					then
						neko_msg success "Successfully logged files into databse"
					else
						neko_msg error "Failed to log files into database"
						exit
					fi
				else
					neko_msg error "Failed to install ${arg}"
					break
					exit
				fi
			then
				neko_msg success "${arg} is able to be packaged"
			else
				neko_msg error "${arg} is not able to be packaged"
				exit
			fi
		done
		;;
	"em" | "emerge")
		shift 1
		case "$@" in
			"--help" | "-h") help emerge ;;
		esac
		[ -z "${1}" ] && usage emerge
		[ "$(id -u)" != "0" ] &&
			{
				neko_msg error "You must have root permissions to run this command"
				exit
			}
		for arg
		do
			neko_prepare "${arg}"
			[ "${deps}" ] &&
				for pkg_deps in ${deps}
				do
					if [ -n "$(command -v neko)" ]
					then
						neko em "${pkg_dep}"
					else
						./neko em "${pkg_dep}"
					fi
				done
			if [ -n "$(command -v neko)" ]
			then
				neko pkg "${arg}"
			else
				./neko pkg "${arg}"
			fi
			export PREFIX=/usr
			neko_msg normal "Installing ${arg}..."
			while read -r INSTALL_LINE
			do
				mkdir -p\
					"${PREFIX}""$(dirname "$(echo "${INSTALL_LINE}" | cut -d' ' -f1)")"
				cp -R "$(echo "${master_dir}"/"${INSTALL_LINE}" | cut -d' ' -f1)"\
					"${PREFIX}""$(echo "${INSTALL_LINE}" | cut -d' ' -f1)"
			done < "${database}"/"${pkgname}"/INSTALL
		done
		;;
	"uninstall")
		shift 1
		case "$@" in
			"--help" | "-h") help uninstall ;;
		esac
		[ -z "${1}" ] && usage uninstall
		[ "$(id -u)" != "0" ] &&
			{
				neko_msg error "You must have root permissions to run this command"
				exit
			}
		for arg
		do
			neko_msg normal "Uninstalling ${arg}..."
			if
				neko_uninstall "${arg}"
				neko_license_uninstall
			then
				neko_msg success "Successfully uninstalled ${arg}"
			else
				neko_msg error "Failed to uninstall ${arg}"
			fi
		done
		;;
	"find")
		shift 1
		case "$@" in
			"--help" | "-h") help find ;;
		esac
		[ -z "${1}" ] && usage find
		[ ! -d "${pkgs_dir}" ] &&
			{
				neko_msg error "No srcpkgs directory found"
				neko_msg normal "Run ${0} init"
				exit
			}
		for arg
		do
			neko_msg normal "$(find "${pkgs_dir}" ! -name srcpkgs -prune -name "*${arg}*" | wc -l) result(s) found for ${arg}"
			find "${pkgs_dir}" ! -name srcpkgs -prune -name "*${arg}*" |
				while read -r line
				do
					. "${line}"/template 2>/dev/null
					# TODO
					# Find better way to find sub pkgs such as -devel
					# At the moment, one must type the exact name
					# e.g. neko find musl-devel
					if [ -n "$(command -v "$(echo "${arg}" | sed 's/\-/_/g')"_pkg)" ]
					then
						"$(echo "${arg}" | sed 's/\-/_/g')"_pkg
					fi
					# otherwise <pkgname>-git-_1 can occur
					if [ -n "${distfiles}" ]
					then
						printf "[1m%s[0m\t%s\n" "${pkgname}-${version}_${revision}" "${short_desc}"
					else
						printf "[1m%s[0m\t%s\n" "${pkgname}_${revision}" "${short_desc}"
					fi
					unset distfiles
					unset pkgname
					unset version
					unset revision
					unset short_desc
				done
		done
		;;
	"new")
		shift 1
		case "$@" in
			"--help" | "-h") help new ;;
		esac
		[ -d "${pkgs_dir}"/"${1}" ] &&
			{
				neko_msg error "There's already a template for ${1}"
				exit
			}
		neko_msg normal "Making a base template for ${1}..."
		if
			mkdir -p "${pkgs_dir}"/"${1}"
			{
				cat << _EOF
pkgname="${1}"
short_desc="Describe the pkg shortly"
deps="deps go here"
version="1.0"
revision="1"
distfiles="https://url.to/source/pkgname-\${version}.tar.gz"
#archive="\${distfiles##*/}"
#wrksrc="\${pkgname}-\${version}"
build_style="makefile"
#make_build_args="CC=\${CC}"
#make_install_args="DESTDIR=\${DESTDIR}"
license="GPL-3.0-or-later"

#do_build()
#{
#	make "\${make_build_args}"
#}

#do_install()
#{
#	make "\${make_install_args}" install
#}
_EOF
			} >> "${pkgs_dir}"/"${1}"/template
		then
			neko_msg success "Made a template for ${1} in ${pkgs_dir}/${1}"
			vi "${pkgs_dir}"/"${1}"/template
		else
			neko_msg error "Failed to make a template for ${1}"
		fi
		;;
	"clean")
		shift 1
		case "$@" in
			"--help" | "-h") help clean ;;
		esac
		[ "$(id)" = "0" ] &&
			{
				neko_msg normal "Cleaning master directory..."
				if
					rm -rf "${root_master_dir:?}"/*
				then
					neko_msg success "Successfully cleaned master directory"
				else
					neko_msg error "Failed to clean master directory"
					exit
				fi
				neko_msg normal "Cleaning source directory..."
				if
					rm -rf "${root_src_dir:?}"/*
				then
					neko_msg success "Successfully cleaned source directory"
				else
					neko_msg error "Failed to clean source directory"
					exit
				fi
			}
		[ "$(id)" != "0" ] &&
			{
				neko_msg normal "Cleaning master directory..."
				if
					rm -rf "${master_dir:?}"/*
				then
					neko_msg success "Successfully cleaned master directory"
				else
					neko_msg error "Failed to clean master directory"
					exit
				fi
				neko_msg normal "Cleaning source directory..."
				if
					rm -rf "${src_dir:?}"/*
				then
					neko_msg success "Successfully cleaned source directory"
				else
					neko_msg error "Failed to clean source directory"
					exit
				fi
			}
		;;
	"zap")
		neko_zap
		;;
	"help" | "--help" | "-h")
		case "${2}" in
			"neko") help neko ;;
			"init") help init ;;
			"pkg") help pkg ;;
			"em" | "emerge") help emerge ;;
			"uninstall") help uninstall ;;
			"find") help find ;;
			"clean") help clean ;;
			"zap") help zap ;;
			"help") help help ;;
			*) help neko ;;
		esac
		;;
	*)
		neko_msg error "Unknown option ${1}"
		neko_msg normal "Use neko help"
esac

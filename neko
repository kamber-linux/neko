#!/bin/sh

# neko sources files depending on arguments
# shellcheck source=/dev/null
# some variables are sourced from the specified template
# shellcheck disable=SC2154
# Unused variables left for readability
# shellcheck disable=SC2034

# To allow while testing ${DESTDIR:?}
DESTDIR=

root_base_dir="${DESTDIR}"/usr/local/share/neko
root_pkgs_dir="${root_base_dir}"/srcpkgs
root_src_dir="${root_base_dir}"/src
root_master_dir="${root_master_dir}"/master
root_license_dir="${root_base_dir}"/licenses

base_dir="${XDG_DATA_HOME:-$HOME/.local/share}"/neko
pkgs_dir="${base_dir}"/srcpkgs
src_dir="${base_dir}"/src
master_dir="${base_dir}"/master
licenses_dir="${base_dir}"/licenses

trap interrupt 2

neko_msg()
{
	case "${1}" in
		"normal") echo "\033[1m=> \033[36mneko:\033[0m ${2}" ;;
		"success") echo "\033[1m=> \033[32mneko:\033[0m ${2}" ;;
		"warning") echo "\033[1m=> \033[33mneko:\033[0m ${2}" ;;
		"error") echo "\033[1m=> \033[31mneko:\033[0m ${2}" ;;
	esac
}

usage()
{
	cat << _EOF
[1musage[0m
neko [command] <target>

[1mcommand[0m:
init
	Initializes the environment for use with the templates - must be run before
	packaging from templates.
pkg
	Checks to see if the <target> can be properly packaged from the template.
em | emerge
	Emerges the <target>. Will build and install it to the system.
uninstall
	Will uninstall <target> to the system.
find
	Will search for the <target>
clean
	Cleans up the master directory.
zap
	Will remove everything from the neko directory - you must run neko init
	after doing so.
help
	Displays this message

[1mstatus[0m:
Neko will have different colors depending on the status:
$(neko_msg normal "This is a normal message.")
$(neko_msg success "This is a successful message.")
$(neko_msg warning "This is a warning message.")
$(neko_msg error "This is an error message.")
_EOF
}

interrupt()
{
	# to start on a new line
	printf "%s\n" ""
	neko_msg error "Command interrupted"
	exit 1
}

neko_pkg()
{
	case "${1}" in
		"install")
			case "${2}" in
				"bin")
					echo "Installing ${3}..."
					if
						mkdir -p "${DESTDIR}"/usr/local/bin
						cp -r "${3}" "${DESTDIR}"/usr/local/bin
						chmod 755 "${DESTDIR}"/usr/local/bin/"$(basename "${3}")"
					then
						echo "Successfully installed ${3}"
					else
						echo "Failed to install ${3}"
						exit
					fi
					;;
				"man")
					echo "Installing ${3}..."
					if
						mkdir -p "${DESTDIR}"/usr/local/share/man/man"${4:-1}"
						cp -r "${3}" "${DESTDIR}"/usr/local/share/man/man"${4:-1}"
						chmod 644 "${DESTDIR}"/usr/local/share/man/man"${4:-1}"/"$(basename "${3}")"
					then
						echo "Successfully installed ${3}"
					else
						echo "Failed to install ${3}"
						exit
					fi
					;;
				"lib")
					echo "Installing ${3}..."
					if
						mkdir -p "${DESTDIR}"/usr/local/lib
						cp -r "${3}" "${DESTDIR}"/usr/local/lib
						chmod 644 "${DESTDIR}"/usr/local/lib/"$(basename "${3}")"
					then
						echo "Successfully installed ${3}"
					else
						echo "Failed to install ${3}"
						exit
					fi
					;;
				"inc")
					neko_msg normal "Installing ${3}..."
					if
						mkdir -p "${DESTDIR}"/usr/local/include
						cp -r "${3}" "${DESTDIR}"/usr/local/include
						chmod 644 "${DESTDIR}"/usr/local/include/"$(basename "${2}")"
					then
						echo "Successfully installed ${3}"
					else
						echo "Failed to install ${3}"
						exit
					fi
					;;
				"conf")
					echo "Installing ${3}..."
					if
						mkdir -p "${DESTDIR}"/etc"${4}"
						cp -r "${3}" "${DESTDIR}"/etc"${4}"
						chmod 644 "${DESTDIR}"/etc"${4}"/"$(basename "${3}")"
					then
						echo "Successfully installed ${3}"
					else
						echo "Failed to install ${3}"
						exit
					fi
					;;
				"file")
					echo "Installing ${4}..."
					if
						mkdir -p "${DESTDIR}"/usr/local"${5}"
						cp -r "${4}" "${DESTDIR}"/usr/local"${5}"
						chmod "${3}" "${DESTDIR}"/usr/local"${5}"/"$(basename "${4}")"
					then
						echo "Successfully installed ${4}"
					else
						echo "Failed to install ${4}"
						exit
					fi
					;;
			esac
			;;
		"uninstall")
			case "${2}" in
				"bin")
					echo "Uninstalling ${3}..."
					if
						rm -rf "${DESTDIR:?}"/usr/local/bin/"${3}"
					then
						echo "Successfully uninstalled ${3}"
					else
						echo "Failed to uninstall ${3}"
						exit
					fi
					;;
				"man")
					echo "Uninstalling ${3}..."
					if
						rm -rf "${DESTDIR:?}"/usr/local/share/man/man"${4:-1}"/"${3}"
					then
						echo "Successfully uninstalled ${3}"
					else
						echo "Failed to uninstall ${3}"
						exit
					fi
					;;
				"lib")
					echo "Uninstalling ${3}..."
					if
						rm -rf "${DESTDIR:?}"/usr/local/lib/"${3}"
					then
						echo "Successfully uninstalled ${3}"
					else
						echo "Failed to uninstall ${3}"
						exit
					fi
					;;
				"inc")
					echo "Uninstalling ${3}..."
					if
						rm -rf "${DESTDIR:?}"/usr/local/include/"${3}"
					then
						echo "Successfully uninstalled ${3}"
					else
						echo "Failed to uninstall ${3}"
						exit
					fi
					;;
				"conf")
					echo "Uninstalling ${3}..."
					if
						rm -rf "${DESTDIR:?}"/etc/"${3}"
					then
						echo "Successfully uninstalled ${3}"
					else
						echo "Failed to uninstall ${3}"
						exit
					fi
					;;
				"file")
					echo "Uninstalling ${3}..."
					if
						rm -rf "${DESTDIR:?}"/usr/local"${3}"
					then
						echo "Successfully uninstalled ${3}"
					else
						echo "Failed to uninstall ${3}"
						exit
					fi
					;;
			esac
			;;
	esac
}

neko_init()
{
	for dir in "${base_dir}" "${pkgs_dir}" "${src_dir}" "${master_dir}" "${licenses_dir}"
	do
		[ ! -d "${dir}" ] && neko_msg normal "Making dir ${dir}..." &&
			if
				mkdir -p "${dir}"
			then
				neko_msg success "Successfully made dir ${dir}"
			else
				neko_msg error "Failed to make dir ${dir}"
				exit
			fi
	done
	neko_msg normal "Copying base srcpkgs to ${base_dir}..."
	if
		cp -r srcpkgs "${base_dir}"
	then
		neko_msg success "Successfully copied base srcpkgs to ${base_dir}"
	else
		neko_msg error "Failed to copy base srcpkgs to ${base_dir}"
		exit
	fi
	neko_msg normal "Copying licenses to ${base_dir}..."
	if
		cp -r licenses "${base_dir}"
	then
		neko_msg success "Successfully copied licenses to ${base_dir}"
	else
		neko_msg error "Failed to copy licenses to ${base_dir}..."
		exit
	fi
}

neko_zap()
{
	neko_msg normal "Zapping neko directory ${base_dir}..."
	if
		rm -rf "${base_dir:?}"/*
	then
		neko_msg success "Successfully zapped neko directory"
	else
		neko_msg error "Failed to zap neko directory"
		exit
	fi

}

neko_prepare()
{
	[ ! -d "${pkgs_dir}" ] && [ ! -d "${root_pkgs_dir}" ] &&
		{
			neko_msg error "No base srcpkgs found in ${base_dir}" && neko_msg normal "Run neko init"
			exit
		}
	[ ! -d "${master_dir}" ] && [ ! -d "${root_master_dir}" ] &&
		{
			neko_msg error "No master dir found in ${base_dir}" && neko_msg normal "Run neko init"
			exit
		}
	[ ! -d "${src_dir}" ] && [ ! -d "${root_src_dir}" ] &&
		{
			neko_msg error "No master dir found in ${base_dir}" && neko_msg normal "Run neko init"
			exit
		}
	[ ! -d "${licenses_dir}" ] && [ ! -d "${root_license_dir}" ] &&
		{
			neko_msg error "No master dir found in ${base_dir}" && neko_msg normal "Run neko init"
			exit
		}
	if [ -f "${pkgs_dir}"/"${1}"/template ]
	then
		template_file="${pkgs_dir}"/"${1}"/template
		patches_dir="${pkgs_dir}"/"${1}"/patches
		files_dir="${pkgs_dir}"/"${1}"/files
		source_dir="${src_dir}"
	elif [ -f "${root_pkgs_dir}"/"${1}"/template ]
	then
		template_file="${root_pkgs_dir}"/"${1}"/template
		patches_dir="${root_pkgs_dir}"/"${1}"/patches
		files_dir="${root_pkgs_dir}"/"${1}"/files
		course_dir="${root_src_dir}"
	else
		neko_msg error "No template found for ${1}"
		exit
	fi
	. "${template_file}"
	if [ "${distfiles}" ]
	then
		wrksrc="${pkgname}"-"${version}"
	elif [ "${giturl}" ]
	then
		wrksrc="$(echo "${pkgname}" | sed 's/-git//')"
	fi
	archive="${distfiles##*/}"
	# Try and use TCC by default
	if [ "${TCC}" = "false" ]
	then
		export CC=cc
	else
		export CC=tcc
	fi
	# Allow override of wrksrc and archive
	. "${template_file}"
}

neko_fetch()
{
	# Remove duplicate wrksrc
	[ -d "${source_dir}"/"${wrksrc}" ] && [ "${build_style}" != "meta" ] &&
		rm -rf "${source_dir:?}"/"${wrksrc:?}"
	# Remove duplicate archive
	[ "${distfiles}" ] && [ -f "${source_dir}"/"${archive}" ] &&
		[ "${build_style}" != "meta" ] && rm -rf "${source_dir:?}"/"${archive:?}"
	cd "${source_dir}" || exit
	[ "${build_style}" = "meta" ] && return
	neko_msg normal "Downloading source for ${1}..."
	if [ "${distfiles}" ]
	then
		if
			wget "${distfiles}"
		then
			neko_msg success "Successfully fetched distfiles for ${1}"
		else
			neko_msg error "Failed to fetch distfiles for ${1}"
			exit
		fi
	elif [ "${giturl}" ]
	then
		if
			git clone "${giturl}"
		then
			neko_msg success "Successfully cloned git repo for ${1}"
		else
			neko_msg error "Failed to clone git repo for ${1}"
			exit
		fi
	else
		[ "${build_style}" != "meta" ] &&
			{
				neko_msg error "No distfiles or giturl specified"
				exit
			}
	fi
}

neko_extract()
{
	[ "${build_style}" = "meta" ] && return
	[ "${distfiles}" ] && neko_msg normal "Extracting distfiles for ${1}..."
	[ "${distfiles}" ] &&
		if
			case "${archive##*.}" in
				"gz" | "tgz")
					tar -zxvf "${archive}"
					;;
				"bz2" | "xz")
					tar -xvf "${archive}"
					;; 
			esac
		then
			neko_msg success "Successfully extracted distfiles for ${pkgname}"
		else
			neko_msg error "Failed to extract distfiles for ${pkgname}"
			exit
		fi
	# Testing for replacing GNU tar with dd and od commands
	case "$(od -N 2 -t x2 "${archive}" | head -n 1 | cut -d' ' -f2)" in
		"8b1f")
			neko_msg normal "${archive} is a gzip archive"
			case "$(od -N 1 -j 2 -t x1 "${archive}" | head -n 1 | cut -d' ' -f2)" in
				"08")
					neko_msg normal "Compression method: deflate"
					;;
				*)
					neko_msg error "Compression method: unknown"
					;;
			esac
			case "$(od -N 1 -j 9 -t x1 "${archive}" | head -n 1 | cut -d' ' -f2)" in
				"03")
					neko_msg normal "Made on: unix system"
					;;
				*)
					neko_msg normal "Made on: unknown"
					;;
			esac
			;;
		"4B50")
			neko_msg normal "${archive} is a zip archive"
			;;
		*)
			neko_msg error "${archive} is an unknown archive"
			;;
	esac
	cd "${wrksrc}" || exit
}

neko_patch()
{
	if [ -d "${patches_dir}" ]
	then
		neko_msg normal "Applying patches for ${1}..."
		for patch in "${patches_dir}"/*.patch
		do
			neko_msg normal "Applying patch ${patch##*/}..."
			if
				patch -Np1 < "${patch}"
			then
				neko_msg normal "Successfully applied patch ${patch##*/}"
			else
				neko_msg error "Failed to apply patch ${patch##*/}"
				exit
			fi
		done
	fi
}

neko_build()
{
	case "${build_style}" in
		"meta")
			:
			;;
		"makefile")
			if [ "${make_args}" ]
			then
				bmake "${make_args}"
			else
				bmake
			fi
			;;
		"gnu-makefile")
			if [ "${make_args}" ]
			then
				make "${make_args}"
			else
				make
			fi
			;;
		"configure")
			if [ "${configure_args}" ]
			then
				./configure "${configure_args}"
			else
				./configure
			fi
			if [ "${make_args}" ]
			then
				bmake "${make_args}"
			else
				bmake
			fi
			;;
		"gnu-configure")
			if [ "${configure_args}" ]
			then
				./configure "${configure_args}"
			else
				./configure
			fi
			if [ "${make_args}" ]
			then
				make "${make_args}"
			else
				make
			fi
			;;
		"meson")
			export CC=cc # meson can't build with tcc compiler
			meson build
			ninja -C build
			;;
		"haskell-cabal")
			:
			;;
	esac
}

neko_install()
{
	case "${build_style}" in
		"makefile")
			bmake install
			;;
		"gnu-makefile")
			make install
			;;
		"configure")
			bmake install
			;;
		"gnu-configure")
			make install
			;;
		"meson")
			ninja -C build install
			;;
		"haskell-cabal")
			cabal update
			cabal install
			;;
	esac
}

neko_license_install()
{
	for pkg_license in ${license}
	do
		neko_msg normal "Installing ${pkg_license} license for ${pkgname}..."
		if
			case "${pkg_license}" in
				"MIT" | "BSD-3-Clause" | "custom")
					mkdir -p "${DESTDIR}"/usr/local/share/licenses/"${pkgname}"
					cp -r "${license_file}" "${DESTDIR}"/usr/local/share/licenses/"${pkgname}"
					chmod 644 "${DESTDIR}"/usr/local/share/licenses/"${pkgname}"/"$(basename "${license_file}")"
					;;
				"GPL-3.0-only" | "GPL-3.0-or-later")
					mkdir -p "${DESTDIR}"/usr/local/share/licenses/"${pkgname}"
					cp -r "${licenses_dir}"/GPL-3 "${DESTDIR}"/usr/local/share/licenses
					chmod 644 "${DESTDIR}"/usr/local/share/licenses/GPL-3
					ln -sf "${DESTDIR}"/usr/local/share/licenses/GPL-3 "${DESTDIR}"/usr/local/share/licenses/"${pkgname}"/"${pkg_license}"
					;;
				"GPL-2.0-only" | "GPL-2.0-or-later")
					mkdir -p "${DESTDIR}"/usr/local/share/licenses/"${pkgname}"
					cp -r "${licenses_dir}"/GPL-2 "${DESTDIR}"/usr/local/share/licenses
					chmod 644 "${DESTDIR}"/usr/local/share/licenses/GPL-2
					ln -sf "${DESTDIR}"/usr/local/share/licenses/GPL-2 "${DESTDIR}"/usr/local/share/licenses/"${pkgname}"/"${pkg_license}"
					;;
				*)
					:
					;;
			esac
		then
			neko_msg success "Successfully installed ${pkg_license} license for ${pkgname}"
			neko_msg success "The ${pkg_license} license for ${pkgname} can be found in ${DESTDIR}/usr/local/share/licenses/${pkgname}"
		else
			neko_msg error "Failed to install ${pkg_license} license for ${pkgname}"
			exit
		fi
	done
}

neko_uninstall()
{
	case "${build_style}" in
		"makefile" | "configure")
			bmake uninstall
			;;
		"gnu-makefile" | "gnu-configure")
			make uninstall
			;;
		"haskell-cabal")
			cabal uninstall
			;;
	esac
}

neko_license_uninstall()
{
	for pkg_license in ${license}
	do
		if
			rm -rf "${DESTDIR:?}"/usr/local/share/licenses/"${pkgname}"
		then
			neko_msg success "Successfully removed ${pkg_license} license for ${pkgname}"
		else
			neko_msg error "Failed to remove ${pkg_license} license for ${pkgname}"
			exit
		fi
	done
}

case "${1}" in
	"init")
		neko_init
		;;
	"zap")
		neko_zap
		;;
	"pkg")
		shift 1
		for arg
		do
			if
				neko_prepare "${arg}"
				[ "${build_style}" = "meta" ] || neko_msg normal "Preparing environment..."
				[ "${deps}" ] &&
					for pkg_dep in ${deps}
					do
						if [ -n "$(command -v neko)" ]
						then
							neko pkg "${pkg_dep}"
						else
							./neko pkg "${pkg_dep}"
						fi
					done
				for step in fetch extract patch
				do
					neko_"${step}" "${arg}"
				done
				[ "${build_style}" = "meta" ] || neko_msg normal "Building ${arg}..." &&
					if
						if [ -n "$(command -v do_build)" ]
						then
							do_build "${arg}"
							unset -f do_build
						else
							neko_build "${arg}"
						fi
					then
						neko_msg success "Successfully built ${arg}"
					else
						neko_msg error "Failed to build ${arg}"
						break
						exit
					fi
				export DESTDIR="${master_dir}"
				neko_msg normal "Installing ${arg}..."
				if
					if [ -n "$(command -v do_install)" ]
					then
						do_install "${arg}"
						unset -f do_install
					else
						neko_install "${arg}"
					fi
					neko_license_install
				then
					neko_msg success "Successfully installed ${arg}"
				else
					neko_msg error "Failed to install ${arg}"
					break
					exit
				fi
				neko_msg normal "Uninstalling ${arg}..."
				if
					if [ -n "$(command -v do_uninstall)" ]
					then
						do_uninstall "${arg}"
						unset -f do_uninstall
					else
						neko_uninstall "${arg}"
					fi
					neko_license_uninstall
				then
					neko_msg success "Successfully uninstalled ${arg}"
				else
					neko_msg error "Failed to uninstall ${arg}"
					break
					exit
				fi
			then
				neko_msg success "${arg} is able to be packaged"
			else
				neko_msg error "${arg} is not able to be packaged"
				exit
			fi
		done
		;;
	"clean")
		neko_msg normal "Cleaning master directory..."
		if
			rm -rf "${master_dir:?}"/*
		then
			neko_msg success "Successfully cleaned master directory"
		else
			neko_msg error "Failed to clean master directory"
			exit
		fi
		;;
	"em" | "emerge")
		[ "$(id -u)" != "0" ] &&
			{
				neko_msg error "You must have root permissions to run this command"
				exit
			}
		shift 1
		for arg
		do
			neko_prepare "${arg}"
			[ "${deps}" ] &&
				for pkg_deps in ${deps}
				do
					if [ -n "$(command -v neko)" ]
					then
						neko em "${pkg_dep}"
					else
						./neko em "${pkg_dep}"
					fi
				done
			for step in fetch extract patch
			do
				neko_"${step}" "${arg}"
			done
			[ "${build_style}" != "meta" ] && neko_msg normal "Building ${arg}..."
			if
				if [ -n "$(command -v do_build)" ]
				then
					do_build "${arg}"
					unset -f do_build
				else
					neko_build "${arg}"
				fi
			then
				neko_msg success "Successfully built ${arg}"
			else
				neko_msg error "Failed to build ${arg}"
				break
				exit
			fi
			neko_msg normal "Installing ${arg}..."
			if
				if [ -n "$(command -v do_install)" ]
				then
					do_install "${arg}"
					unset -f do_install
				else
					neko_install "${arg}"
				fi
				neko_license_install
			then
				neko_msg success "Successfully installed ${arg}"
			else
				neko_msg error "Failed to install ${arg}"
				break
				exit
			fi
		done
		;;
	"uninstall")
		[ "$(id -u)" != "0" ] &&
			{
				neko_msg error "You must have root permissions to run this command"
				exit
			}
		shift 1
		for arg
		do
			neko_prepare "${arg}"
			if [ -d "${wrksrc}" ]
			then
				neko_msg normal "Uninstalling ${arg}"
				if
					if [ -n "$(command -v do_uninstall)" ]
					then
						do_uninstall "${arg}"
						unset -f do_uninstall
					else
						neko_uninstall "${arg}"
					fi
					neko_license_uninstall
				then
					neko_msg success "Successfully uninstalled ${2}"
				else
					neko_msg error "Failed to uninstall ${arg}"
					exit
				fi
			else
				for step in fetch extract patch
				do
					neko_"${step}" "${arg}"
				done
				if
					if [ -n "$(command -v do_uninstall)" ]
					then
						do_uninstall "${arg}"
						unset -f do_uninstall
					else
						neko_uninstall "${arg}"
					fi
					neko_license_uninstall
				then
					neko_msg success "Successfully uninstalled ${arg}"
				else
					neko_msg error "Failed to uninstall ${arg}"
					exit
				fi
			fi
		done
		;;
	"new")
		[ -d "${pkgs_dir}"/"${2}" ] &&
			{
				neko_msg error "There's already a template for ${2}"
				exit
			}
		neko_msg normal "Making a base template for ${2}..."
		if
			mkdir -p "${pkgs_dir}"/"${2}"
			{
			echo "pkgname=\"${2}\""
			echo "version=\"1.0\""
			echo "revision=\"1\""
			echo "distfiles=\"url.to/source-\${version}.tar.gz\""
			echo "build_style=\"makefile\""
			echo "license=\"GPL-3.0-or-later\""
			} >> "${pkgs_dir}"/"${2}"/template
		then
			neko_msg success "Made a template for ${2} in ${pkgs_dir}/${2}"
		else
			neko_msg error "Failed to make a template for ${2}"
		fi
		;;
	"find")
		shift 1
		for arg
		do
			neko_msg normal "$(find  "${pkgs_dir}" ! -name srcpkgs -prune -name "*${arg}*" | wc -l) result(s) found for ${arg}"
			for pkg_found in $(find  "${pkgs_dir}" ! -name srcpkgs -prune -name "*${arg}*" -print0 | xargs -0 -L1 basename 2> /dev/null)
			do
				. "${pkgs_dir}"/"${pkg_found}"/template
				[ "${distfiles}" ] && [ "${version}" ] &&
					printf "%s\t%s\n" "[1m${pkg_found}-${version}_${revision}[0m" "${license}"
				[ "${build_style}" = "meta" ] &&
					printf "%s\t%s\n" "[1m${pkg_found}_${revision}[0m" "${license}"
				[ "${giturl}" ] &&
					printf "%s\t%s\n" "[1m${pkg_found}[0m" "${license}"
				unset version
				unset giturl
			done
		done
		;;
	"help")
		usage
		;;
	*)
		neko_msg error "Unknown option ${1}"
		neko_msg normal "Use neko help"
esac
